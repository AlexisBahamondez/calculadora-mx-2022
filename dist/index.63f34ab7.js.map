{"mappings":"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","sources":["src/subsidy.js","src/rates.js","src/getSecurityTable.js","src/utilsSecurity.js","src/security.js","src/periodButton.js"],"sourcesContent":["const diaryTable = [\n    { min: 0.01, max: 58.0, amount: 13.34 },\n    { min: 58.01, max: 87.0, amount: 13.34 },\n    { min: 87.01, max: 113.86, amount: 13.33 },\n    { min: 113.87, max: 116.0, amount: 12.88 },\n    { min: 116.01, max: 145.78, amount: 12.54 },\n    { min: 145.79, max: 154.66, amount: 11.61 },\n    { min: 154.67, max: 174.93, amount: 10.65 },\n    { min: 174.94, max: 204.09, amount: 9.66 },\n    { min: 204.1, max: 233.24, amount: 8.31 },\n    { min: 233.25, max: 242.04, amount: 7.13 },\n    { min: 242.05, max: Infinity, amount: 0 },\n];\n\nconst quincenalTable = [\n    { min: 0.01, max: 884.48, amount: 203.51 },\n    { min: 884.49, max: 1326.69, amount: 203.42 },\n    { min: 1326.7, max: 1736.42, amount: 203.31 },\n    { min: 1736.43, max: 1768.94, amount: 196.39 },\n    { min: 1768.95, max: 2223.08, amount: 191.23 },\n    { min: 2223.09, max: 2358.59, amount: 177.12 },\n    { min: 2358.6, max: 2667.71, amount: 162.44 },\n    { min: 2667.72, max: 3112.34, amount: 147.32 },\n    { min: 3112.35, max: 3556.95, amount: 126.77 },\n    { min: 3556.96, max: 3691.17, amount: 108.81 },\n    { min: 3691.18, max: Infinity, amount: 0 },\n];\n\nconst mensualTable = [\n    { min: 0.01, max: 1768.96, amount: 407.02 },\n    { min: 1768.97, max: 2653.38, amount: 406.83 },\n    { min: 2653.39, max: 3472.84, amount: 406.62 },\n    { min: 3472.85, max: 3537.87, amount: 392.77 },\n    { min: 3537.88, max: 4446.15, amount: 382.46 },\n    { min: 4446.16, max: 4717.18, amount: 354.23 },\n    { min: 4717.19, max: 5335.42, amount: 324.87 },\n    { min: 5335.43, max: 6224.67, amount: 294.63 },\n    { min: 6224.68, max: 7113.9, amount: 253.54 },\n    { min: 7113.91, max: 7382.33, amount: 217.61 },\n    { min: 7382.34, max: Infinity, amount: 0 },\n];\n\n/**\n * It returns a table based on the period\n * @param period - The period of the table to be returned.\n * @returns A function that takes a period and returns a table.\n */\nconst getTable = (period) => {\n    switch (period) {\n        case \"diario\":\n            return diaryTable;\n        case \"quincenal\":\n            return quincenalTable;\n        case \"mensual\":\n            return mensualTable;\n        default:\n            throw new Error(`Periodo no valido: ${period}`);\n    }\n};\n\n/**\n * It takes an amount and a period, and returns the subsidy for that amount and period\n * @param amount - The amount of the gross income\n * @param period - The period of the subsidy. This is either \"monthly\" or \"biweekly\" or \"daily\".\n * @returns The amount of subsidy\n */\nfunction calculateSubsidy(amount, period) {\n    // get the table row\n    const row = getTable(period).find(\n        (row) => amount >= row.min && amount <= row.max\n    );\n\n    // calculate the amount of subsidy\n    return row.amount;\n}\n\nmodule.exports = calculateSubsidy;\n","const diaryRates = [\n    { min: 0.01, max: 21.19, amount: 0, percent: 0.0192 },\n    { min: 21.2, max: 179.87, amount: 0.41, percent: 0.064 },\n    { min: 179.88, max: 316.1, amount: 10.56, percent: 0.1088 },\n    { min: 316.11, max: 367.45, amount: 25.38, percent: 0.16 },\n    { min: 367.46, max: 439.94, amount: 33.6, percent: 0.1792 },\n    { min: 439.95, max: 887.29, amount: 46.59, percent: 0.2136 },\n    { min: 887.3, max: 1398.5, amount: 142.15, percent: 0.2352 },\n    { min: 1398.51, max: 2669.96, amount: 262.38, percent: 0.3 },\n    { min: 2669.97, max: 3559.95, amount: 643.82, percent: 0.32 },\n    { min: 3559.96, max: 10679.84, amount: 928.61, percent: 0.34 },\n    { min: 10679.85, max: Infinity, amount: 3349.38, percent: 0.35 },\n];\n\nconst quincenalRates = [\n    { min: 0.01, max: 318, amount: 0, percent: 0.0192 },\n    { min: 318.01, max: 2699.4, amount: 6.15, percent: 0.064 },\n    { min: 2699.41, max: 4744.05, amount: 158.55, percent: 0.1088 },\n    { min: 4744.06, max: 5514.75, amount: 381, percent: 0.16 },\n    { min: 5514.76, max: 6602.7, amount: 504.3, percent: 0.1792 },\n    { min: 6602.71, max: 13316.7, amount: 699.3, percent: 0.2136 },\n    { min: 13316.71, max: 20988.9, amount: 2133.3, percent: 0.2352 },\n    { min: 20988.81, max: 40071.3, amount: 3937.8, percent: 0.3 },\n    { min: 40071.31, max: 53428.5, amount: 9662.55, percent: 0.32 },\n    { min: 53428.51, max: 160285.35, amount: 13936.8, percent: 0.34 },\n    { min: 160285.36, max: Infinity, amount: 50268.15, percent: 0.35 },\n];\n\nconst mensualRates = [\n    { min: 0.01, max: 644.58, amount: 0, percent: 0.0192 },\n    { min: 644.59, max: 5470.92, amount: 12.38, percent: 0.064 },\n    { min: 5470.93, max: 9614.66, amount: 321.26, percent: 0.1088 },\n    { min: 9614.67, max: 11176.62, amount: 772.1, percent: 0.16 },\n    { min: 11176.63, max: 13381.47, amount: 1022.01, percent: 0.1792 },\n    { min: 13381.48, max: 26988.5, amount: 1417.12, percent: 0.2136 },\n    { min: 26988.51, max: 42537.58, amount: 4323.58, percent: 0.2352 },\n    { min: 42537.59, max: 81211.25, amount: 7980.73, percent: 0.3 },\n    { min: 81211.26, max: 108281.67, amount: 19582.83, percent: 0.32 },\n    { min: 108281.68, max: 324845.01, amount: 28245.36, percent: 0.34 },\n    { min: 324845.02, max: Infinity, amount: 101876.9, percent: 0.35 },\n];\n\n/**\n * It takes an income and a period and returns an object with the income tax information\n * @param income - The income to calculate the LISR for.\n * @param period - The period of the income. It can be \"diario\", \"quincenal\" or \"mensual\".\n * @returns An object with the following properties:\n * baseGravable,\n * limiteInferior,\n * excedente,\n * porcentajeSobreExcedente,\n * impuestoMarginal,\n * cuotaFija,\n * lisr,\n */\nfunction calculateLisr(income, period) {\n    let lisr = 0;\n    let rates = null;\n    let baseGravable = income;\n    let limiteInferior = 0;\n    let excedente = 0;\n    let porcentajeSobreExcedente = 0;\n    let impuestoMarginal = 0;\n    let cuotaFija = 0;\n\n    switch (period) {\n        case \"diario\":\n            rates = diaryRates;\n            break;\n        case \"quincenal\":\n            rates = quincenalRates;\n            break;\n        case \"mensual\":\n            rates = mensualRates;\n            break;\n        default:\n            throw new Error(`Periodo no valido: ${period}`);\n    }\n    rates.forEach((rate) => {\n        if (income >= rate.min && income <= rate.max) {\n            limiteInferior = rate.min;\n            excedente = income - limiteInferior;\n            porcentajeSobreExcedente = rate.percent;\n            impuestoMarginal = excedente * porcentajeSobreExcedente;\n            cuotaFija = rate.amount;\n            lisr = impuestoMarginal + cuotaFija;\n        }\n    });\n\n    const lisrObject = {\n        baseGravable,\n        limiteInferior,\n        excedente,\n        porcentajeSobreExcedente,\n        impuestoMarginal,\n        cuotaFija,\n        lisr,\n    };\n\n    return lisrObject;\n}\n\nmodule.exports = calculateLisr;\n","const securityTable = {\n    riesgo: {\n        patron: 0.005,\n        trabajador: 0,\n    },\n    enfermedad: {\n        cuotaFija: {\n            patron: 0.204,\n            trabajador: 0,\n        },\n        excedente: {\n            patron: 0.011,\n            trabajador: 0.004,\n        },\n        gastosMedicos: {\n            patron: 0.0105,\n            trabajador: 0.00375,\n        },\n        prestaciones: {\n            patron: 0.007,\n            trabajador: 0.0025,\n        },\n    },\n    invalidez: {\n        patron: 0.0175,\n        trabajador: 0.00625,\n    },\n    cesantia: {\n        retiro: {\n            patron: 0.02,\n            trabajador: 0,\n        },\n        vejez: {\n            patron: 0.0315,\n            trabajador: 0.01125,\n        },\n    },\n    guarderias: {\n        patron: 0.01,\n        trabajador: 0,\n    },\n    infonavit: {\n        patron: 0.05,\n        trabajador: 0,\n    },\n};\n\nmodule.exports = securityTable;\n","const securityTable = require(\"./getSecurityTable\");\n\n/**\n * It takes a string and returns a number\n * @param period - The period, it can be \"diario\", \"quincenal\" or \"mensual\".\n */\nconst getDays = (period) => {\n    switch (period) {\n        case \"diario\":\n            return 1;\n        case \"quincenal\":\n            return 15;\n        case \"mensual\":\n            return 30;\n        default:\n            throw new Error(`Periodo no valido: ${period}`);\n    }\n};\n\n/**\n * It returns the benefit for the employee or employer depending on the type of the user, the salary,\n * the minimum daily salary, the salary integrated to the top, and the period\n * @param type - \"patron\" or \"trabajador\"\n * @param salary - the salary of the employee\n * @param sueldoMinimoDiario - minimum wage in Mexico\n * @param salaryIntegradoTope - is the maximum amount daily that can be paid to the employee.\n * @param period - it can be \"diario\", \"quincenal\" or \"mensual\".\n * @returns The benefit of the employee or the employer.\n */\nconst getBenefit = (\n    type,\n    salary,\n    sueldoMinimoDiario,\n    salaryIntegradoTope,\n    period\n) => {\n    if (type === \"patron\") {\n        return salary === sueldoMinimoDiario\n            ? salaryIntegradoTope *\n                  getDays(period) *\n                  securityTable.enfermedad.prestaciones.patron +\n                  sueldoMinimoDiario *\n                      getDays(period) *\n                      securityTable.enfermedad.prestaciones.trabajador\n            : salaryIntegradoTope *\n                  getDays(period) *\n                  securityTable.enfermedad.prestaciones.patron;\n    } else {\n        return salary !== sueldoMinimoDiario\n            ? salaryIntegradoTope *\n                  getDays(period) *\n                  securityTable.enfermedad.prestaciones.trabajador\n            : 0;\n    }\n};\n\n/**\n * It returns the medical expenses for a given type of worker (patron or trabajador), salary,\n * sueldoMinimoDiario, salaryIntegradoTope, and period\n * @param type - \"patron\" or \"trabajador\"\n * @param salary - the salary of the employee\n * @param sueldoMinimoDiario - minimum wage in Mexico\n * @param salaryIntegradoTope - is the maximum amount daily that can be paid to the employee.\n * @param period - it can be \"diario\", \"quincenal\" or \"mensual\".\n * @returns the value of the medical expenses.\n */\nconst getMedicalExpenses = (\n    type,\n    salary,\n    sueldoMinimoDiario,\n    salaryIntegradoTope,\n    period\n) => {\n    if (type === \"patron\") {\n        return salary === sueldoMinimoDiario\n            ? salaryIntegradoTope *\n                  getDays(period) *\n                  securityTable.enfermedad.gastosMedicos.patron +\n                  sueldoMinimoDiario *\n                      getDays(period) *\n                      securityTable.enfermedad.gastosMedicos.trabajador\n            : salaryIntegradoTope *\n                  getDays(period) *\n                  securityTable.enfermedad.gastosMedicos.patron;\n    } else {\n        return salary !== sueldoMinimoDiario\n            ? salaryIntegradoTope *\n                  getDays(period) *\n                  securityTable.enfermedad.gastosMedicos.trabajador\n            : 0;\n    }\n};\n\n/**\n * It returns the amount of money that should be paid for unemployment and old age insurance, depending\n * on the type of the person (employer or employee), the salary, the minimum daily salary, the salary\n * integrated limit, and the period\n * @param type - \"patron\" or \"trabajador\"\n * @param salary - the salary of the employee\n * @param sueldoMinimoDiario - minimum wage in Mexico\n * @param salaryIntegradoTope - is the maximum amount daily that can be paid to the employee.\n * @param period - it can be \"diario\", \"quincenal\" or \"mensual\".\n * @returns the value of the unemployment and old age insurance.\n */\nconst getUnemploymentAndOldAge = (\n    type,\n    salary,\n    sueldoMinimoDiario,\n    salaryIntegradoTope,\n    period\n) => {\n    if (type === \"patron\") {\n        return salary === sueldoMinimoDiario\n            ? salaryIntegradoTope *\n                  getDays(period) *\n                  securityTable.cesantia.vejez.patron +\n                  sueldoMinimoDiario *\n                      getDays(period) *\n                      securityTable.cesantia.vejez.trabajador\n            : salaryIntegradoTope *\n                  getDays(period) *\n                  securityTable.cesantia.vejez.patron;\n    } else {\n        return salary !== sueldoMinimoDiario\n            ? salaryIntegradoTope *\n                  getDays(period) *\n                  securityTable.cesantia.vejez.trabajador\n            : 0;\n    }\n};\n\n/**\n * It returns the disability amount for a given type of user (patron or trabajador), salary,\n * sueldoMinimoDiario, salaryIntegradoTope, and period\n * @param type - \"patron\" or \"trabajador\"\n * @param salary - the employee's salary\n * @param sueldoMinimoDiario - minimum wage in Mexico\n * @param salaryIntegradoTope - is the maximum amount daily that can be paid to the employee.\n * @param period - it can be \"diario\", \"quincenal\" or \"mensual\".\n */\nconst getDisability = (\n    type,\n    salary,\n    sueldoMinimoDiario,\n    salaryIntegradoTope,\n    period\n) => {\n    if (type === \"patron\") {\n        return salary === sueldoMinimoDiario\n            ? salaryIntegradoTope *\n                  getDays(period) *\n                  securityTable.invalidez.patron +\n                  sueldoMinimoDiario *\n                      getDays(period) *\n                      securityTable.invalidez.trabajador\n            : salaryIntegradoTope *\n                  getDays(period) *\n                  securityTable.invalidez.patron;\n    } else {\n        return salary !== sueldoMinimoDiario\n            ? salaryIntegradoTope *\n                  getDays(period) *\n                  securityTable.invalidez.trabajador\n            : 0;\n    }\n};\n\nmodule.exports = {\n    getDays,\n    getBenefit,\n    getMedicalExpenses,\n    getUnemploymentAndOldAge,\n    getDisability,\n};\n","const securityTable = require(\"./getSecurityTable\");\nconst {\n    getDays,\n    getBenefit,\n    getMedicalExpenses,\n    getUnemploymentAndOldAge,\n    getDisability,\n} = require(\"./utilsSecurity\");\n\n/**\n * It calculates the amount of money that an employer must pay to the Mexican government for a given\n * employee\n * @param amount - The amount of money the employee is being paid.\n * @param period - weekly, biweekly, monthly, bimonthly, quarterly, semiannually, annually\n * @param type - \"patron\" or \"trabajador\"\n * @returns The sum of the security data\n */\nfunction calculateSecurity(amount, period, type) {\n    const uma = 96.22;\n    const factorIntegracion = 1.0452;\n    const sueldoMinimoDiario = 172.87;\n    const salarioDiario = amount / getDays(period);\n\n    const salarioIntegradoTope = Math.min(\n        salarioDiario * factorIntegracion,\n        25 * uma\n    );\n\n    const cuotaFija =\n        uma * getDays(period) * securityTable.enfermedad.cuotaFija[type];\n\n    const excedente =\n        salarioIntegradoTope > 3 * uma\n            ? (salarioIntegradoTope - 3 * uma) *\n              securityTable.enfermedad.excedente[type] *\n              getDays(period)\n            : 0;\n\n    const prestaciones = getBenefit(\n        type,\n        salarioDiario,\n        sueldoMinimoDiario,\n        salarioIntegradoTope,\n        period\n    );\n\n    const gastosMedicos = getMedicalExpenses(\n        type,\n        salarioDiario,\n        sueldoMinimoDiario,\n        salarioIntegradoTope,\n        period\n    );\n\n    const riesgo =\n        salarioIntegradoTope * getDays(period) * securityTable.riesgo[type];\n\n    const invalidez = getDisability(\n        type,\n        salarioDiario,\n        sueldoMinimoDiario,\n        salarioIntegradoTope,\n        period\n    );\n\n    const guarderias =\n        salarioIntegradoTope * getDays(period) * securityTable.guarderias[type];\n\n    const retiro =\n        salarioIntegradoTope *\n        getDays(period) *\n        securityTable.cesantia.retiro[type];\n\n    const infonavit =\n        salarioIntegradoTope * getDays(period) * securityTable.infonavit[type];\n\n    const vejez = getUnemploymentAndOldAge(\n        type,\n        salarioDiario,\n        sueldoMinimoDiario,\n        salarioIntegradoTope,\n        period\n    );\n\n    const securityData = {\n        cuotaFija,\n        excedente,\n        prestaciones,\n        gastosMedicos,\n        riesgo,\n        invalidez,\n        guarderias,\n        retiro,\n        infonavit,\n        vejez,\n    };\n\n    const sumSecurityData =\n        cuotaFija +\n        excedente +\n        prestaciones +\n        gastosMedicos +\n        riesgo +\n        invalidez +\n        guarderias +\n        retiro +\n        infonavit +\n        vejez;\n\n    return sumSecurityData;\n}\n\nmodule.exports = calculateSecurity;\n","const periodButtons = document.getElementsByClassName(\"btn-period\");\n\nconst buttonState = {};\n\nconst setActive = (activeName) => {\n    for (const button of periodButtons) {\n        buttonState[button.name] = activeName === button.name;\n        activeName === button.name\n            ? button.classList.add(\"active\")\n            : button.classList.remove(\"active\");\n    }\n};\n\nsetActive();\n\nconsole.log(buttonState);\nfor (const button of periodButtons) {\n    console.log(button.name);\n    buttonState[button.name] = false;\n    button.addEventListener(\"click\", onClickPeriod);\n}\n\nfunction onClickPeriod(e) {\n    const name = e?.target?.name;\n    if (!name) return;\n    setActive(name);\n    console.log(buttonState);\n}\n"],"names":["$d7ab63170adddd04$var$diaryTable","min","max","amount","Infinity","$d7ab63170adddd04$var$quincenalTable","$d7ab63170adddd04$var$mensualTable","$34a04e7f601c07ce$var$diaryRates","percent","$34a04e7f601c07ce$var$quincenalRates","$34a04e7f601c07ce$var$mensualRates","$cba8432baa283e4f$exports","riesgo","patron","trabajador","enfermedad","cuotaFija","excedente","gastosMedicos","prestaciones","invalidez","cesantia","retiro","vejez","guarderias","infonavit","$8e67078ca0bc02f4$var$getDays","period","Error","$8e67078ca0bc02f4$exports","type","salary","sueldoMinimoDiario","salaryIntegradoTope","getDays","getBenefit","getMedicalExpenses","getUnemploymentAndOldAge","getDisability","$990dea0f7933500f$var$periodButtons","document","getElementsByClassName","$990dea0f7933500f$var$buttonState","$990dea0f7933500f$var$setActive","activeName","button","name","classList","add","remove","console","log","addEventListener","$990dea0f7933500f$var$onClickPeriod","e","target"],"version":3,"file":"index.63f34ab7.js.map"}